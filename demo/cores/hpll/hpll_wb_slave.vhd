---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for DMTD Helper PLL
---------------------------------------------------------------------------------------
-- File           : hpll_wb_slave.vhd
-- Author         : auto-generated by wbgen2 from hpll_wb.wb
-- Created        : Mon Jun 21 14:16:43 2010
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE hpll_wb.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library wbgen2;
use wbgen2.wbgen2_pkg.all;

entity hpll_wb_slave is
  port (
    rst_n_i                                  : in     std_logic;
    wb_clk_i                                 : in     std_logic;
    wb_addr_i                                : in     std_logic_vector(3 downto 0);
    wb_data_i                                : in     std_logic_vector(31 downto 0);
    wb_data_o                                : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
-- Port for BIT field: 'PLL Enable' in reg: 'HPLL Control Register'
    hpll_pcr_enable_o                        : out    std_logic;
-- Port for BIT field: 'PLL Force Freq mode' in reg: 'HPLL Control Register'
    hpll_pcr_force_f_o                       : out    std_logic;
-- Port for std_logic_vector field: 'DAC serial clock select' in reg: 'HPLL Control Register'
    hpll_pcr_dac_clksel_o                    : out    std_logic_vector(2 downto 0);
-- Port for std_logic_vector field: 'Phase detector gating period' in reg: 'HPLL Control Register'
    hpll_pcr_pd_gate_o                       : out    std_logic_vector(2 downto 0);
-- Port for std_logic_vector field: 'Reference clock input select' in reg: 'HPLL Control Register'
    hpll_pcr_refsel_o                        : out    std_logic_vector(1 downto 0);
-- Port for MONOSTABLE field: 'PLL Reset' in reg: 'HPLL Control Register'
    hpll_pcr_swrst_o                         : out    std_logic;
-- Port for std_logic_vector field: 'Reference divider' in reg: 'HPLL Divider Register'
    hpll_divr_div_ref_o                      : out    std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Feedback divider' in reg: 'HPLL Divider Register'
    hpll_divr_div_fb_o                       : out    std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Proportional gain (Kp)' in reg: 'HPLL Frequency Branch Gain Register'
    hpll_fbgr_f_kp_o                         : out    std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Integral gain (Ki)' in reg: 'HPLL Frequency Branch Gain Register'
    hpll_fbgr_f_ki_o                         : out    std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Proportional gain (Kp)' in reg: 'HPLL Phase Branch Gain Register'
    hpll_pbgr_p_kp_o                         : out    std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Integral gain (Ki)' in reg: 'HPLL Phase Branch Gain Register'
    hpll_pbgr_p_ki_o                         : out    std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Phase Lock detect threshold' in reg: 'HPLL Lock Detect Control Register'
    hpll_ldcr_ld_thr_o                       : out    std_logic_vector(7 downto 0);
-- Port for std_logic_vector field: 'Lock detect samples' in reg: 'HPLL Lock Detect Control Register'
    hpll_ldcr_ld_samp_o                      : out    std_logic_vector(7 downto 0);
-- Port for std_logic_vector field: 'Frequency detector gating period' in reg: 'HPLL Frequency branch control register'
    hpll_fbcr_fd_gate_o                      : out    std_logic_vector(2 downto 0);
-- Port for std_logic_vector field: 'Frequency error setpoint' in reg: 'HPLL Frequency branch control register'
    hpll_fbcr_ferr_set_o                     : out    std_logic_vector(11 downto 0);
-- Port for BIT field: 'Frequency lock' in reg: 'HPLL Status Register'
    hpll_psr_freq_lk_i                       : in     std_logic;
-- Port for BIT field: 'Phase lock' in reg: 'HPLL Status Register'
    hpll_psr_phase_lk_i                      : in     std_logic;
-- Ports for BIT field: 'Loss-of-lock indicator' in reg: 'HPLL Status Register'
    hpll_psr_lock_lost_o                     : out    std_logic;
    hpll_psr_lock_lost_i                     : in     std_logic;
    hpll_psr_lock_lost_load_o                : out    std_logic;
-- FIFO write request
    hpll_rfifo_wr_req_i                      : in     std_logic;
-- FIFO full flag
    hpll_rfifo_wr_full_o                     : out    std_logic;
    hpll_rfifo_err_val_i                     : in     std_logic_vector(11 downto 0);
    hpll_rfifo_fp_mode_i                     : in     std_logic;
    hpll_rfifo_dac_val_i                     : in     std_logic_vector(15 downto 0)
  );
end hpll_wb_slave;

architecture syn of hpll_wb_slave is

signal hpll_pcr_enable_int                      : std_logic      ;
signal hpll_pcr_force_f_int                     : std_logic      ;
signal hpll_pcr_dac_clksel_int                  : std_logic_vector(2 downto 0);
signal hpll_pcr_pd_gate_int                     : std_logic_vector(2 downto 0);
signal hpll_pcr_refsel_int                      : std_logic_vector(1 downto 0);
signal hpll_pcr_swrst_dly0                      : std_logic      ;
signal hpll_pcr_swrst_int                       : std_logic      ;
signal hpll_divr_div_ref_int                    : std_logic_vector(15 downto 0);
signal hpll_divr_div_fb_int                     : std_logic_vector(15 downto 0);
signal hpll_fbgr_f_kp_int                       : std_logic_vector(15 downto 0);
signal hpll_fbgr_f_ki_int                       : std_logic_vector(15 downto 0);
signal hpll_pbgr_p_kp_int                       : std_logic_vector(15 downto 0);
signal hpll_pbgr_p_ki_int                       : std_logic_vector(15 downto 0);
signal hpll_ldcr_ld_thr_int                     : std_logic_vector(7 downto 0);
signal hpll_ldcr_ld_samp_int                    : std_logic_vector(7 downto 0);
signal hpll_fbcr_fd_gate_int                    : std_logic_vector(2 downto 0);
signal hpll_fbcr_ferr_set_int                   : std_logic_vector(11 downto 0);
signal hpll_rfifo_in_int                        : std_logic_vector(28 downto 0);
signal hpll_rfifo_out_int                       : std_logic_vector(28 downto 0);
signal hpll_rfifo_rdreq_int                     : std_logic      ;
signal hpll_rfifo_rdreq_int_d0                  : std_logic      ;
signal hpll_rfifo_empty_int                     : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(3 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal bus_clock_int                            : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_data_i;
  bwsel_reg <= wb_sel_i;
  bus_clock_int <= wb_clk_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      hpll_pcr_enable_int <= '0';
      hpll_pcr_force_f_int <= '0';
      hpll_pcr_dac_clksel_int <= "000";
      hpll_pcr_pd_gate_int <= "000";
      hpll_pcr_refsel_int <= "00";
      hpll_pcr_swrst_int <= '0';
      hpll_divr_div_ref_int <= "0000000000000000";
      hpll_divr_div_fb_int <= "0000000000000000";
      hpll_fbgr_f_kp_int <= "0000000000000000";
      hpll_fbgr_f_ki_int <= "0000000000000000";
      hpll_pbgr_p_kp_int <= "0000000000000000";
      hpll_pbgr_p_ki_int <= "0000000000000000";
      hpll_ldcr_ld_thr_int <= "00000000";
      hpll_ldcr_ld_samp_int <= "00000000";
      hpll_fbcr_fd_gate_int <= "000";
      hpll_fbcr_ferr_set_int <= "000000000000";
      hpll_psr_lock_lost_load_o <= '0';
      hpll_rfifo_rdreq_int <= '0';
    elsif rising_edge(bus_clock_int) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          hpll_pcr_swrst_int <= '0';
          hpll_psr_lock_lost_load_o <= '0';
          ack_in_progress <= '0';
        else
          hpll_psr_lock_lost_load_o <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(3 downto 0) is
          when "0000" => 
            if (wb_we_i = '1') then
              hpll_pcr_enable_int <= wrdata_reg(0);
              hpll_pcr_force_f_int <= wrdata_reg(1);
              hpll_pcr_dac_clksel_int <= wrdata_reg(6 downto 4);
              hpll_pcr_pd_gate_int <= wrdata_reg(10 downto 8);
              hpll_pcr_refsel_int <= wrdata_reg(12 downto 11);
              hpll_pcr_swrst_int <= wrdata_reg(31);
            else
              rddata_reg(0) <= hpll_pcr_enable_int;
              rddata_reg(1) <= hpll_pcr_force_f_int;
              rddata_reg(6 downto 4) <= hpll_pcr_dac_clksel_int;
              rddata_reg(10 downto 8) <= hpll_pcr_pd_gate_int;
              rddata_reg(12 downto 11) <= hpll_pcr_refsel_int;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
            end if;
            ack_sreg(2) <= '1';
            ack_in_progress <= '1';
          when "0001" => 
            if (wb_we_i = '1') then
              hpll_divr_div_ref_int <= wrdata_reg(15 downto 0);
              hpll_divr_div_fb_int <= wrdata_reg(31 downto 16);
            else
              rddata_reg(15 downto 0) <= hpll_divr_div_ref_int;
              rddata_reg(31 downto 16) <= hpll_divr_div_fb_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0010" => 
            if (wb_we_i = '1') then
              hpll_fbgr_f_kp_int <= wrdata_reg(15 downto 0);
              hpll_fbgr_f_ki_int <= wrdata_reg(31 downto 16);
            else
              rddata_reg(15 downto 0) <= hpll_fbgr_f_kp_int;
              rddata_reg(31 downto 16) <= hpll_fbgr_f_ki_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0011" => 
            if (wb_we_i = '1') then
              hpll_pbgr_p_kp_int <= wrdata_reg(15 downto 0);
              hpll_pbgr_p_ki_int <= wrdata_reg(31 downto 16);
            else
              rddata_reg(15 downto 0) <= hpll_pbgr_p_kp_int;
              rddata_reg(31 downto 16) <= hpll_pbgr_p_ki_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0100" => 
            if (wb_we_i = '1') then
              hpll_ldcr_ld_thr_int <= wrdata_reg(7 downto 0);
              hpll_ldcr_ld_samp_int <= wrdata_reg(15 downto 8);
            else
              rddata_reg(7 downto 0) <= hpll_ldcr_ld_thr_int;
              rddata_reg(15 downto 8) <= hpll_ldcr_ld_samp_int;
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0101" => 
            if (wb_we_i = '1') then
              hpll_fbcr_fd_gate_int <= wrdata_reg(2 downto 0);
              hpll_fbcr_ferr_set_int <= wrdata_reg(15 downto 4);
            else
              rddata_reg(2 downto 0) <= hpll_fbcr_fd_gate_int;
              rddata_reg(15 downto 4) <= hpll_fbcr_ferr_set_int;
              rddata_reg(3) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0110" => 
            if (wb_we_i = '1') then
              hpll_psr_lock_lost_load_o <= '1';
            else
              rddata_reg(0) <= hpll_psr_freq_lk_i;
              rddata_reg(1) <= hpll_psr_phase_lk_i;
              rddata_reg(2) <= hpll_psr_lock_lost_i;
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "0111" => 
            if (wb_we_i = '1') then
            else
              if (hpll_rfifo_rdreq_int_d0 = '0') then
                hpll_rfifo_rdreq_int <= not hpll_rfifo_rdreq_int;
              else
                rddata_reg(11 downto 0) <= hpll_rfifo_out_int(11 downto 0);
                rddata_reg(15) <= hpll_rfifo_out_int(12);
                rddata_reg(31 downto 16) <= hpll_rfifo_out_int(28 downto 13);
                ack_in_progress <= '1';
                ack_sreg(0) <= '1';
              end if;
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
            end if;
          when "1000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(17) <= hpll_rfifo_empty_int;
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_data_o <= rddata_reg;
-- PLL Enable
  hpll_pcr_enable_o <= hpll_pcr_enable_int;
-- PLL Force Freq mode
  hpll_pcr_force_f_o <= hpll_pcr_force_f_int;
-- DAC serial clock select
  hpll_pcr_dac_clksel_o <= hpll_pcr_dac_clksel_int;
-- Phase detector gating period
  hpll_pcr_pd_gate_o <= hpll_pcr_pd_gate_int;
-- Reference clock input select
  hpll_pcr_refsel_o <= hpll_pcr_refsel_int;
-- PLL Reset
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      hpll_pcr_swrst_dly0 <= '0';
      hpll_pcr_swrst_o <= '0';
    elsif rising_edge(bus_clock_int) then
      hpll_pcr_swrst_dly0 <= hpll_pcr_swrst_int;
      hpll_pcr_swrst_o <= hpll_pcr_swrst_int and (not hpll_pcr_swrst_dly0);
    end if;
  end process;
  
  
-- Reference divider
  hpll_divr_div_ref_o <= hpll_divr_div_ref_int;
-- Feedback divider
  hpll_divr_div_fb_o <= hpll_divr_div_fb_int;
-- Proportional gain (Kp)
  hpll_fbgr_f_kp_o <= hpll_fbgr_f_kp_int;
-- Integral gain (Ki)
  hpll_fbgr_f_ki_o <= hpll_fbgr_f_ki_int;
-- Proportional gain (Kp)
  hpll_pbgr_p_kp_o <= hpll_pbgr_p_kp_int;
-- Integral gain (Ki)
  hpll_pbgr_p_ki_o <= hpll_pbgr_p_ki_int;
-- Phase Lock detect threshold
  hpll_ldcr_ld_thr_o <= hpll_ldcr_ld_thr_int;
-- Lock detect samples
  hpll_ldcr_ld_samp_o <= hpll_ldcr_ld_samp_int;
-- Frequency detector gating period
  hpll_fbcr_fd_gate_o <= hpll_fbcr_fd_gate_int;
-- Frequency error setpoint
  hpll_fbcr_ferr_set_o <= hpll_fbcr_ferr_set_int;
-- Frequency lock
-- Phase lock
-- Loss-of-lock indicator
  hpll_psr_lock_lost_o <= wrdata_reg(2);
-- extra code for reg/fifo/mem: HPLL Phase/Output record FIFO
  hpll_rfifo_in_int(11 downto 0) <= hpll_rfifo_err_val_i;
  hpll_rfifo_in_int(12) <= hpll_rfifo_fp_mode_i;
  hpll_rfifo_in_int(28 downto 13) <= hpll_rfifo_dac_val_i;
  hpll_rfifo_INST : wbgen2_fifo_sync
    generic map (
      g_size               => 1024,
      g_width              => 29,
      g_usedw_size         => 10
    )
    port map (
      wr_req_i             => hpll_rfifo_wr_req_i,
      wr_full_o            => hpll_rfifo_wr_full_o,
      rd_full_o            => open,
      rd_empty_o           => hpll_rfifo_empty_int,
      rd_usedw_o           => open,
      rd_req_i             => hpll_rfifo_rdreq_int,
      clk_i                => bus_clock_int,
      wr_data_i            => hpll_rfifo_in_int,
      rd_data_o            => hpll_rfifo_out_int
    );
  
-- extra code for reg/fifo/mem: FIFO 'HPLL Phase/Output record FIFO' data output register 0
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      hpll_rfifo_rdreq_int_d0 <= '0';
    elsif rising_edge(bus_clock_int) then
      hpll_rfifo_rdreq_int_d0 <= hpll_rfifo_rdreq_int;
    end if;
  end process;
  
  
  rwaddr_reg <= wb_addr_i;
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
