---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for TDC
---------------------------------------------------------------------------------------
-- File           : tdc_wb.vhd
-- Author         : auto-generated by wbgen2 from tdc.wb
-- Created        : Thu Aug 25 22:28:17 2011
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE tdc.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

entity tdc_wb is
  port (
    rst_n_i                                  : in     std_logic;
    wb_clk_i                                 : in     std_logic;
    wb_addr_i                                : in     std_logic_vector(7 downto 0);
    wb_data_i                                : in     std_logic_vector(31 downto 0);
    wb_data_o                                : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_irq_o                                 : out    std_logic;
-- Port for MONOSTABLE field: 'Reset' in reg: 'Control and status'
    tdc_cs_rst_o                             : out    std_logic;
-- Port for BIT field: 'Ready' in reg: 'Control and status'
    tdc_cs_rdy_i                             : in     std_logic;
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 0 (high word)'
    tdc_desh0_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 0 (low word)'
    tdc_desl0_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 1 (high word)'
    tdc_desh1_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 1 (low word)'
    tdc_desl1_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 2 (high word)'
    tdc_desh2_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 2 (low word)'
    tdc_desl2_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 3 (high word)'
    tdc_desh3_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 3 (low word)'
    tdc_desl3_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 4 (high word)'
    tdc_desh4_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 4 (low word)'
    tdc_desl4_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 5 (high word)'
    tdc_desh5_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 5 (low word)'
    tdc_desl5_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 6 (high word)'
    tdc_desh6_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 6 (low word)'
    tdc_desl6_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 7 (high word)'
    tdc_desh7_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 7 (low word)'
    tdc_desl7_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 8 (high word)'
    tdc_desh8_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 8 (low word)'
    tdc_desl8_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 9 (high word)'
    tdc_desh9_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 9 (low word)'
    tdc_desl9_o                              : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 10 (high word)'
    tdc_desh10_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 10 (low word)'
    tdc_desl10_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 11 (high word)'
    tdc_desh11_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 11 (low word)'
    tdc_desl11_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 12 (high word)'
    tdc_desh12_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 12 (low word)'
    tdc_desl12_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 13 (high word)'
    tdc_desh13_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 13 (low word)'
    tdc_desl13_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 14 (high word)'
    tdc_desh14_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 14 (low word)'
    tdc_desl14_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 15 (high word)'
    tdc_desh15_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 15 (low word)'
    tdc_desl15_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 16 (high word)'
    tdc_desh16_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 16 (low word)'
    tdc_desl16_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 17 (high word)'
    tdc_desh17_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 17 (low word)'
    tdc_desl17_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 18 (high word)'
    tdc_desh18_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 18 (low word)'
    tdc_desl18_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 19 (high word)'
    tdc_desh19_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 19 (low word)'
    tdc_desl19_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 20 (high word)'
    tdc_desh20_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 20 (low word)'
    tdc_desl20_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 21 (high word)'
    tdc_desh21_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 21 (low word)'
    tdc_desl21_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 22 (high word)'
    tdc_desh22_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 22 (low word)'
    tdc_desl22_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 23 (high word)'
    tdc_desh23_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 23 (low word)'
    tdc_desl23_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 24 (high word)'
    tdc_desh24_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 24 (low word)'
    tdc_desl24_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 25 (high word)'
    tdc_desh25_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 25 (low word)'
    tdc_desl25_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 26 (high word)'
    tdc_desh26_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 26 (low word)'
    tdc_desl26_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 27 (high word)'
    tdc_desh27_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 27 (low word)'
    tdc_desl27_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 28 (high word)'
    tdc_desh28_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 28 (low word)'
    tdc_desl28_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Deskew value for channel 29 (high word)'
    tdc_desh29_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Deskew value for channel 29 (low word)'
    tdc_desl29_o                             : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Detected polarities'
    tdc_pol_i                                : in     std_logic_vector(29 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 0'
    tdc_raw0_i                               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 0 (high word)'
    tdc_mesh0_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 0 (low word)'
    tdc_mesl0_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 1'
    tdc_raw1_i                               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 1 (high word)'
    tdc_mesh1_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 1 (low word)'
    tdc_mesl1_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 2'
    tdc_raw2_i                               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 2 (high word)'
    tdc_mesh2_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 2 (low word)'
    tdc_mesl2_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 3'
    tdc_raw3_i                               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 3 (high word)'
    tdc_mesh3_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 3 (low word)'
    tdc_mesl3_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 4'
    tdc_raw4_i                               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 4 (high word)'
    tdc_mesh4_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 4 (low word)'
    tdc_mesl4_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 5'
    tdc_raw5_i                               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 5 (high word)'
    tdc_mesh5_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 5 (low word)'
    tdc_mesl5_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 6'
    tdc_raw6_i                               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 6 (high word)'
    tdc_mesh6_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 6 (low word)'
    tdc_mesl6_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 7'
    tdc_raw7_i                               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 7 (high word)'
    tdc_mesh7_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 7 (low word)'
    tdc_mesl7_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 8'
    tdc_raw8_i                               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 8 (high word)'
    tdc_mesh8_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 8 (low word)'
    tdc_mesl8_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 9'
    tdc_raw9_i                               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 9 (high word)'
    tdc_mesh9_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 9 (low word)'
    tdc_mesl9_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 10'
    tdc_raw10_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 10 (high word)'
    tdc_mesh10_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 10 (low word)'
    tdc_mesl10_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 11'
    tdc_raw11_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 11 (high word)'
    tdc_mesh11_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 11 (low word)'
    tdc_mesl11_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 12'
    tdc_raw12_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 12 (high word)'
    tdc_mesh12_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 12 (low word)'
    tdc_mesl12_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 13'
    tdc_raw13_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 13 (high word)'
    tdc_mesh13_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 13 (low word)'
    tdc_mesl13_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 14'
    tdc_raw14_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 14 (high word)'
    tdc_mesh14_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 14 (low word)'
    tdc_mesl14_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 15'
    tdc_raw15_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 15 (high word)'
    tdc_mesh15_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 15 (low word)'
    tdc_mesl15_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 16'
    tdc_raw16_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 16 (high word)'
    tdc_mesh16_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 16 (low word)'
    tdc_mesl16_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 17'
    tdc_raw17_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 17 (high word)'
    tdc_mesh17_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 17 (low word)'
    tdc_mesl17_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 18'
    tdc_raw18_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 18 (high word)'
    tdc_mesh18_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 18 (low word)'
    tdc_mesl18_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 19'
    tdc_raw19_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 19 (high word)'
    tdc_mesh19_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 19 (low word)'
    tdc_mesl19_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 20'
    tdc_raw20_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 20 (high word)'
    tdc_mesh20_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 20 (low word)'
    tdc_mesl20_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 21'
    tdc_raw21_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 21 (high word)'
    tdc_mesh21_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 21 (low word)'
    tdc_mesl21_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 22'
    tdc_raw22_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 22 (high word)'
    tdc_mesh22_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 22 (low word)'
    tdc_mesl22_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 23'
    tdc_raw23_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 23 (high word)'
    tdc_mesh23_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 23 (low word)'
    tdc_mesl23_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 24'
    tdc_raw24_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 24 (high word)'
    tdc_mesh24_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 24 (low word)'
    tdc_mesl24_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 25'
    tdc_raw25_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 25 (high word)'
    tdc_mesh25_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 25 (low word)'
    tdc_mesl25_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 26'
    tdc_raw26_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 26 (high word)'
    tdc_mesh26_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 26 (low word)'
    tdc_mesl26_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 27'
    tdc_raw27_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 27 (high word)'
    tdc_mesh27_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 27 (low word)'
    tdc_mesl27_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 28'
    tdc_raw28_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 28 (high word)'
    tdc_mesh28_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 28 (low word)'
    tdc_mesl28_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Value' in reg: 'Raw measured value for channel 29'
    tdc_raw29_i                              : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'High word value' in reg: 'Fixed point measurement for channel 29 (high word)'
    tdc_mesh29_i                             : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Low word value' in reg: 'Fixed point measurement for channel 29 (low word)'
    tdc_mesl29_i                             : in     std_logic_vector(31 downto 0);
    irq_ie0_i                                : in     std_logic;
    irq_ie1_i                                : in     std_logic;
    irq_ie2_i                                : in     std_logic;
    irq_ie3_i                                : in     std_logic;
    irq_ie4_i                                : in     std_logic;
    irq_ie5_i                                : in     std_logic;
    irq_ie6_i                                : in     std_logic;
    irq_ie7_i                                : in     std_logic;
    irq_ie8_i                                : in     std_logic;
    irq_ie9_i                                : in     std_logic;
    irq_ie10_i                               : in     std_logic;
    irq_ie11_i                               : in     std_logic;
    irq_ie12_i                               : in     std_logic;
    irq_ie13_i                               : in     std_logic;
    irq_ie14_i                               : in     std_logic;
    irq_ie15_i                               : in     std_logic;
    irq_ie16_i                               : in     std_logic;
    irq_ie17_i                               : in     std_logic;
    irq_ie18_i                               : in     std_logic;
    irq_ie19_i                               : in     std_logic;
    irq_ie20_i                               : in     std_logic;
    irq_ie21_i                               : in     std_logic;
    irq_ie22_i                               : in     std_logic;
    irq_ie23_i                               : in     std_logic;
    irq_ie24_i                               : in     std_logic;
    irq_ie25_i                               : in     std_logic;
    irq_ie26_i                               : in     std_logic;
    irq_ie27_i                               : in     std_logic;
    irq_ie28_i                               : in     std_logic;
    irq_ie29_i                               : in     std_logic;
    irq_isc_i                                : in     std_logic;
    irq_icc_i                                : in     std_logic;
-- Port for BIT field: 'Freeze request' in reg: 'Debug control'
    tdc_dctl_req_o                           : out    std_logic;
-- Port for BIT field: 'Freeze acknowledgement' in reg: 'Debug control'
    tdc_dctl_ack_i                           : in     std_logic;
-- Port for MONOSTABLE field: 'Switch to next channel' in reg: 'Channel selection'
    tdc_csel_next_o                          : out    std_logic;
-- Port for BIT field: 'Last channel reached' in reg: 'Channel selection'
    tdc_csel_last_i                          : in     std_logic;
-- Port for BIT field: 'Calibration signal select' in reg: 'Calibration signal selection'
    tdc_cal_o                                : out    std_logic;
-- Port for std_logic_vector field: 'Address' in reg: 'LUT read address'
    tdc_luta_o                               : out    std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Data' in reg: 'LUT read data'
    tdc_lutd_i                               : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Address' in reg: 'Histogram read address'
    tdc_hisa_o                               : out    std_logic_vector(15 downto 0);
-- Port for std_logic_vector field: 'Data' in reg: 'Histogram read data'
    tdc_hisd_i                               : in     std_logic_vector(31 downto 0);
-- Port for MONOSTABLE field: 'Measurement start' in reg: 'Frequency counter control and status'
    tdc_fcc_st_o                             : out    std_logic;
-- Port for BIT field: 'Measurement ready' in reg: 'Frequency counter control and status'
    tdc_fcc_rdy_i                            : in     std_logic;
-- Port for std_logic_vector field: 'Result' in reg: 'Frequency counter current value'
    tdc_fcr_i                                : in     std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Result' in reg: 'Frequency counter stored value'
    tdc_fcsr_i                               : in     std_logic_vector(31 downto 0)
  );
end tdc_wb;

architecture syn of tdc_wb is

signal tdc_cs_rst_dly0                          : std_logic      ;
signal tdc_cs_rst_int                           : std_logic      ;
signal tdc_desh0_int                            : std_logic_vector(31 downto 0);
signal tdc_desl0_int                            : std_logic_vector(31 downto 0);
signal tdc_desh1_int                            : std_logic_vector(31 downto 0);
signal tdc_desl1_int                            : std_logic_vector(31 downto 0);
signal tdc_desh2_int                            : std_logic_vector(31 downto 0);
signal tdc_desl2_int                            : std_logic_vector(31 downto 0);
signal tdc_desh3_int                            : std_logic_vector(31 downto 0);
signal tdc_desl3_int                            : std_logic_vector(31 downto 0);
signal tdc_desh4_int                            : std_logic_vector(31 downto 0);
signal tdc_desl4_int                            : std_logic_vector(31 downto 0);
signal tdc_desh5_int                            : std_logic_vector(31 downto 0);
signal tdc_desl5_int                            : std_logic_vector(31 downto 0);
signal tdc_desh6_int                            : std_logic_vector(31 downto 0);
signal tdc_desl6_int                            : std_logic_vector(31 downto 0);
signal tdc_desh7_int                            : std_logic_vector(31 downto 0);
signal tdc_desl7_int                            : std_logic_vector(31 downto 0);
signal tdc_desh8_int                            : std_logic_vector(31 downto 0);
signal tdc_desl8_int                            : std_logic_vector(31 downto 0);
signal tdc_desh9_int                            : std_logic_vector(31 downto 0);
signal tdc_desl9_int                            : std_logic_vector(31 downto 0);
signal tdc_desh10_int                           : std_logic_vector(31 downto 0);
signal tdc_desl10_int                           : std_logic_vector(31 downto 0);
signal tdc_desh11_int                           : std_logic_vector(31 downto 0);
signal tdc_desl11_int                           : std_logic_vector(31 downto 0);
signal tdc_desh12_int                           : std_logic_vector(31 downto 0);
signal tdc_desl12_int                           : std_logic_vector(31 downto 0);
signal tdc_desh13_int                           : std_logic_vector(31 downto 0);
signal tdc_desl13_int                           : std_logic_vector(31 downto 0);
signal tdc_desh14_int                           : std_logic_vector(31 downto 0);
signal tdc_desl14_int                           : std_logic_vector(31 downto 0);
signal tdc_desh15_int                           : std_logic_vector(31 downto 0);
signal tdc_desl15_int                           : std_logic_vector(31 downto 0);
signal tdc_desh16_int                           : std_logic_vector(31 downto 0);
signal tdc_desl16_int                           : std_logic_vector(31 downto 0);
signal tdc_desh17_int                           : std_logic_vector(31 downto 0);
signal tdc_desl17_int                           : std_logic_vector(31 downto 0);
signal tdc_desh18_int                           : std_logic_vector(31 downto 0);
signal tdc_desl18_int                           : std_logic_vector(31 downto 0);
signal tdc_desh19_int                           : std_logic_vector(31 downto 0);
signal tdc_desl19_int                           : std_logic_vector(31 downto 0);
signal tdc_desh20_int                           : std_logic_vector(31 downto 0);
signal tdc_desl20_int                           : std_logic_vector(31 downto 0);
signal tdc_desh21_int                           : std_logic_vector(31 downto 0);
signal tdc_desl21_int                           : std_logic_vector(31 downto 0);
signal tdc_desh22_int                           : std_logic_vector(31 downto 0);
signal tdc_desl22_int                           : std_logic_vector(31 downto 0);
signal tdc_desh23_int                           : std_logic_vector(31 downto 0);
signal tdc_desl23_int                           : std_logic_vector(31 downto 0);
signal tdc_desh24_int                           : std_logic_vector(31 downto 0);
signal tdc_desl24_int                           : std_logic_vector(31 downto 0);
signal tdc_desh25_int                           : std_logic_vector(31 downto 0);
signal tdc_desl25_int                           : std_logic_vector(31 downto 0);
signal tdc_desh26_int                           : std_logic_vector(31 downto 0);
signal tdc_desl26_int                           : std_logic_vector(31 downto 0);
signal tdc_desh27_int                           : std_logic_vector(31 downto 0);
signal tdc_desl27_int                           : std_logic_vector(31 downto 0);
signal tdc_desh28_int                           : std_logic_vector(31 downto 0);
signal tdc_desl28_int                           : std_logic_vector(31 downto 0);
signal tdc_desh29_int                           : std_logic_vector(31 downto 0);
signal tdc_desl29_int                           : std_logic_vector(31 downto 0);
signal tdc_dctl_req_int                         : std_logic      ;
signal tdc_csel_next_dly0                       : std_logic      ;
signal tdc_csel_next_int                        : std_logic      ;
signal tdc_cal_int                              : std_logic      ;
signal tdc_luta_int                             : std_logic_vector(15 downto 0);
signal tdc_hisa_int                             : std_logic_vector(15 downto 0);
signal tdc_fcc_st_dly0                          : std_logic      ;
signal tdc_fcc_st_int                           : std_logic      ;
signal eic_idr_int                              : std_logic_vector(31 downto 0);
signal eic_idr_write_int                        : std_logic      ;
signal eic_ier_int                              : std_logic_vector(31 downto 0);
signal eic_ier_write_int                        : std_logic      ;
signal eic_imr_int                              : std_logic_vector(31 downto 0);
signal eic_isr_clear_int                        : std_logic_vector(31 downto 0);
signal eic_isr_status_int                       : std_logic_vector(31 downto 0);
signal eic_irq_ack_int                          : std_logic_vector(31 downto 0);
signal eic_isr_write_int                        : std_logic      ;
signal irq_inputs_vector_int                    : std_logic_vector(31 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(7 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal bus_clock_int                            : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_data_i;
  bwsel_reg <= wb_sel_i;
  bus_clock_int <= wb_clk_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      tdc_cs_rst_int <= '0';
      tdc_desh0_int <= "00000000000000000000000000000000";
      tdc_desl0_int <= "00000000000000000000000000000000";
      tdc_desh1_int <= "00000000000000000000000000000000";
      tdc_desl1_int <= "00000000000000000000000000000000";
      tdc_desh2_int <= "00000000000000000000000000000000";
      tdc_desl2_int <= "00000000000000000000000000000000";
      tdc_desh3_int <= "00000000000000000000000000000000";
      tdc_desl3_int <= "00000000000000000000000000000000";
      tdc_desh4_int <= "00000000000000000000000000000000";
      tdc_desl4_int <= "00000000000000000000000000000000";
      tdc_desh5_int <= "00000000000000000000000000000000";
      tdc_desl5_int <= "00000000000000000000000000000000";
      tdc_desh6_int <= "00000000000000000000000000000000";
      tdc_desl6_int <= "00000000000000000000000000000000";
      tdc_desh7_int <= "00000000000000000000000000000000";
      tdc_desl7_int <= "00000000000000000000000000000000";
      tdc_desh8_int <= "00000000000000000000000000000000";
      tdc_desl8_int <= "00000000000000000000000000000000";
      tdc_desh9_int <= "00000000000000000000000000000000";
      tdc_desl9_int <= "00000000000000000000000000000000";
      tdc_desh10_int <= "00000000000000000000000000000000";
      tdc_desl10_int <= "00000000000000000000000000000000";
      tdc_desh11_int <= "00000000000000000000000000000000";
      tdc_desl11_int <= "00000000000000000000000000000000";
      tdc_desh12_int <= "00000000000000000000000000000000";
      tdc_desl12_int <= "00000000000000000000000000000000";
      tdc_desh13_int <= "00000000000000000000000000000000";
      tdc_desl13_int <= "00000000000000000000000000000000";
      tdc_desh14_int <= "00000000000000000000000000000000";
      tdc_desl14_int <= "00000000000000000000000000000000";
      tdc_desh15_int <= "00000000000000000000000000000000";
      tdc_desl15_int <= "00000000000000000000000000000000";
      tdc_desh16_int <= "00000000000000000000000000000000";
      tdc_desl16_int <= "00000000000000000000000000000000";
      tdc_desh17_int <= "00000000000000000000000000000000";
      tdc_desl17_int <= "00000000000000000000000000000000";
      tdc_desh18_int <= "00000000000000000000000000000000";
      tdc_desl18_int <= "00000000000000000000000000000000";
      tdc_desh19_int <= "00000000000000000000000000000000";
      tdc_desl19_int <= "00000000000000000000000000000000";
      tdc_desh20_int <= "00000000000000000000000000000000";
      tdc_desl20_int <= "00000000000000000000000000000000";
      tdc_desh21_int <= "00000000000000000000000000000000";
      tdc_desl21_int <= "00000000000000000000000000000000";
      tdc_desh22_int <= "00000000000000000000000000000000";
      tdc_desl22_int <= "00000000000000000000000000000000";
      tdc_desh23_int <= "00000000000000000000000000000000";
      tdc_desl23_int <= "00000000000000000000000000000000";
      tdc_desh24_int <= "00000000000000000000000000000000";
      tdc_desl24_int <= "00000000000000000000000000000000";
      tdc_desh25_int <= "00000000000000000000000000000000";
      tdc_desl25_int <= "00000000000000000000000000000000";
      tdc_desh26_int <= "00000000000000000000000000000000";
      tdc_desl26_int <= "00000000000000000000000000000000";
      tdc_desh27_int <= "00000000000000000000000000000000";
      tdc_desl27_int <= "00000000000000000000000000000000";
      tdc_desh28_int <= "00000000000000000000000000000000";
      tdc_desl28_int <= "00000000000000000000000000000000";
      tdc_desh29_int <= "00000000000000000000000000000000";
      tdc_desl29_int <= "00000000000000000000000000000000";
      tdc_dctl_req_int <= '0';
      tdc_csel_next_int <= '0';
      tdc_cal_int <= '0';
      tdc_luta_int <= "0000000000000000";
      tdc_hisa_int <= "0000000000000000";
      tdc_fcc_st_int <= '0';
      eic_idr_write_int <= '0';
      eic_ier_write_int <= '0';
      eic_isr_write_int <= '0';
    elsif rising_edge(bus_clock_int) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          tdc_cs_rst_int <= '0';
          tdc_csel_next_int <= '0';
          tdc_fcc_st_int <= '0';
          eic_idr_write_int <= '0';
          eic_ier_write_int <= '0';
          eic_isr_write_int <= '0';
          ack_in_progress <= '0';
        else
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(7 downto 0) is
          when "00000000" => 
            if (wb_we_i = '1') then
              tdc_cs_rst_int <= wrdata_reg(0);
            else
              rddata_reg(1) <= tdc_cs_rdy_i;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(2) <= '1';
            ack_in_progress <= '1';
          when "00000001" => 
            if (wb_we_i = '1') then
              tdc_desh0_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh0_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00000010" => 
            if (wb_we_i = '1') then
              tdc_desl0_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl0_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00000011" => 
            if (wb_we_i = '1') then
              tdc_desh1_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh1_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00000100" => 
            if (wb_we_i = '1') then
              tdc_desl1_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl1_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00000101" => 
            if (wb_we_i = '1') then
              tdc_desh2_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh2_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00000110" => 
            if (wb_we_i = '1') then
              tdc_desl2_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl2_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00000111" => 
            if (wb_we_i = '1') then
              tdc_desh3_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh3_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00001000" => 
            if (wb_we_i = '1') then
              tdc_desl3_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl3_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00001001" => 
            if (wb_we_i = '1') then
              tdc_desh4_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh4_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00001010" => 
            if (wb_we_i = '1') then
              tdc_desl4_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl4_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00001011" => 
            if (wb_we_i = '1') then
              tdc_desh5_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh5_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00001100" => 
            if (wb_we_i = '1') then
              tdc_desl5_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl5_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00001101" => 
            if (wb_we_i = '1') then
              tdc_desh6_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh6_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00001110" => 
            if (wb_we_i = '1') then
              tdc_desl6_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl6_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00001111" => 
            if (wb_we_i = '1') then
              tdc_desh7_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh7_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00010000" => 
            if (wb_we_i = '1') then
              tdc_desl7_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl7_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00010001" => 
            if (wb_we_i = '1') then
              tdc_desh8_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh8_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00010010" => 
            if (wb_we_i = '1') then
              tdc_desl8_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl8_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00010011" => 
            if (wb_we_i = '1') then
              tdc_desh9_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh9_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00010100" => 
            if (wb_we_i = '1') then
              tdc_desl9_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl9_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00010101" => 
            if (wb_we_i = '1') then
              tdc_desh10_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh10_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00010110" => 
            if (wb_we_i = '1') then
              tdc_desl10_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl10_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00010111" => 
            if (wb_we_i = '1') then
              tdc_desh11_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh11_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00011000" => 
            if (wb_we_i = '1') then
              tdc_desl11_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl11_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00011001" => 
            if (wb_we_i = '1') then
              tdc_desh12_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh12_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00011010" => 
            if (wb_we_i = '1') then
              tdc_desl12_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl12_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00011011" => 
            if (wb_we_i = '1') then
              tdc_desh13_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh13_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00011100" => 
            if (wb_we_i = '1') then
              tdc_desl13_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl13_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00011101" => 
            if (wb_we_i = '1') then
              tdc_desh14_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh14_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00011110" => 
            if (wb_we_i = '1') then
              tdc_desl14_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl14_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00011111" => 
            if (wb_we_i = '1') then
              tdc_desh15_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh15_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00100000" => 
            if (wb_we_i = '1') then
              tdc_desl15_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl15_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00100001" => 
            if (wb_we_i = '1') then
              tdc_desh16_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh16_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00100010" => 
            if (wb_we_i = '1') then
              tdc_desl16_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl16_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00100011" => 
            if (wb_we_i = '1') then
              tdc_desh17_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh17_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00100100" => 
            if (wb_we_i = '1') then
              tdc_desl17_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl17_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00100101" => 
            if (wb_we_i = '1') then
              tdc_desh18_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh18_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00100110" => 
            if (wb_we_i = '1') then
              tdc_desl18_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl18_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00100111" => 
            if (wb_we_i = '1') then
              tdc_desh19_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh19_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00101000" => 
            if (wb_we_i = '1') then
              tdc_desl19_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl19_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00101001" => 
            if (wb_we_i = '1') then
              tdc_desh20_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh20_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00101010" => 
            if (wb_we_i = '1') then
              tdc_desl20_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl20_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00101011" => 
            if (wb_we_i = '1') then
              tdc_desh21_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh21_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00101100" => 
            if (wb_we_i = '1') then
              tdc_desl21_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl21_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00101101" => 
            if (wb_we_i = '1') then
              tdc_desh22_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh22_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00101110" => 
            if (wb_we_i = '1') then
              tdc_desl22_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl22_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00101111" => 
            if (wb_we_i = '1') then
              tdc_desh23_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh23_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00110000" => 
            if (wb_we_i = '1') then
              tdc_desl23_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl23_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00110001" => 
            if (wb_we_i = '1') then
              tdc_desh24_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh24_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00110010" => 
            if (wb_we_i = '1') then
              tdc_desl24_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl24_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00110011" => 
            if (wb_we_i = '1') then
              tdc_desh25_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh25_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00110100" => 
            if (wb_we_i = '1') then
              tdc_desl25_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl25_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00110101" => 
            if (wb_we_i = '1') then
              tdc_desh26_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh26_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00110110" => 
            if (wb_we_i = '1') then
              tdc_desl26_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl26_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00110111" => 
            if (wb_we_i = '1') then
              tdc_desh27_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh27_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00111000" => 
            if (wb_we_i = '1') then
              tdc_desl27_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl27_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00111001" => 
            if (wb_we_i = '1') then
              tdc_desh28_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh28_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00111010" => 
            if (wb_we_i = '1') then
              tdc_desl28_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl28_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00111011" => 
            if (wb_we_i = '1') then
              tdc_desh29_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desh29_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00111100" => 
            if (wb_we_i = '1') then
              tdc_desl29_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= tdc_desl29_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00111101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(29 downto 0) <= tdc_pol_i;
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00111110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw0_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "00111111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh0_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01000000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl0_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01000001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw1_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01000010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh1_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01000011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl1_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01000100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw2_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01000101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh2_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01000110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl2_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01000111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw3_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01001000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh3_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01001001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl3_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01001010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw4_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01001011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh4_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01001100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl4_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01001101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw5_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01001110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh5_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01001111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl5_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01010000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw6_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01010001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh6_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01010010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl6_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01010011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw7_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01010100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh7_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01010101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl7_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01010110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw8_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01010111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh8_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01011000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl8_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01011001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw9_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01011010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh9_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01011011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl9_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01011100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw10_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01011101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh10_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01011110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl10_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01011111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw11_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01100000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh11_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01100001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl11_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01100010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw12_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01100011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh12_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01100100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl12_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01100101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw13_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01100110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh13_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01100111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl13_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01101000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw14_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01101001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh14_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01101010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl14_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01101011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw15_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01101100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh15_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01101101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl15_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01101110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw16_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01101111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh16_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01110000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl16_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01110001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw17_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01110010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh17_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01110011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl17_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01110100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw18_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01110101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh18_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01110110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl18_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01110111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw19_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01111000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh19_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01111001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl19_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01111010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw20_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01111011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh20_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01111100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl20_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01111101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw21_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01111110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh21_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "01111111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl21_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10000000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw22_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10000001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh22_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10000010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl22_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10000011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw23_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10000100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh23_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10000101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl23_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10000110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw24_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10000111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh24_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10001000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl24_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10001001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw25_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10001010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh25_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10001011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl25_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10001100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw26_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10001101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh26_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10001110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl26_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10001111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw27_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10010000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh27_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10010001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl27_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10010010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw28_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10010011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh28_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10010100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl28_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10010101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_raw29_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10010110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesh29_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10010111" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_mesl29_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10011000" => 
            if (wb_we_i = '1') then
              tdc_dctl_req_int <= wrdata_reg(0);
            else
              rddata_reg(0) <= tdc_dctl_req_int;
              rddata_reg(1) <= tdc_dctl_ack_i;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10011001" => 
            if (wb_we_i = '1') then
              tdc_csel_next_int <= wrdata_reg(0);
            else
              rddata_reg(1) <= tdc_csel_last_i;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(2) <= '1';
            ack_in_progress <= '1';
          when "10011010" => 
            if (wb_we_i = '1') then
              tdc_cal_int <= wrdata_reg(0);
            else
              rddata_reg(0) <= tdc_cal_int;
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10011011" => 
            if (wb_we_i = '1') then
              tdc_luta_int <= wrdata_reg(15 downto 0);
            else
              rddata_reg(15 downto 0) <= tdc_luta_int;
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10011100" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_lutd_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10011101" => 
            if (wb_we_i = '1') then
              tdc_hisa_int <= wrdata_reg(15 downto 0);
            else
              rddata_reg(15 downto 0) <= tdc_hisa_int;
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10011110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_hisd_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10011111" => 
            if (wb_we_i = '1') then
              tdc_fcc_st_int <= wrdata_reg(0);
            else
              rddata_reg(1) <= tdc_fcc_rdy_i;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(2) <= '1';
            ack_in_progress <= '1';
          when "10100000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_fcr_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10100001" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= tdc_fcsr_i;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10101000" => 
            if (wb_we_i = '1') then
              eic_idr_write_int <= '1';
            else
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10101001" => 
            if (wb_we_i = '1') then
              eic_ier_write_int <= '1';
            else
              rddata_reg(0) <= 'X';
              rddata_reg(1) <= 'X';
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10101010" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= eic_imr_int(31 downto 0);
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "10101011" => 
            if (wb_we_i = '1') then
              eic_isr_write_int <= '1';
            else
              rddata_reg(31 downto 0) <= eic_isr_status_int(31 downto 0);
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_data_o <= rddata_reg;
-- Reset
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tdc_cs_rst_dly0 <= '0';
      tdc_cs_rst_o <= '0';
    elsif rising_edge(bus_clock_int) then
      tdc_cs_rst_dly0 <= tdc_cs_rst_int;
      tdc_cs_rst_o <= tdc_cs_rst_int and (not tdc_cs_rst_dly0);
    end if;
  end process;
  
  
-- Ready
-- High word value
  tdc_desh0_o <= tdc_desh0_int;
-- Low word value
  tdc_desl0_o <= tdc_desl0_int;
-- High word value
  tdc_desh1_o <= tdc_desh1_int;
-- Low word value
  tdc_desl1_o <= tdc_desl1_int;
-- High word value
  tdc_desh2_o <= tdc_desh2_int;
-- Low word value
  tdc_desl2_o <= tdc_desl2_int;
-- High word value
  tdc_desh3_o <= tdc_desh3_int;
-- Low word value
  tdc_desl3_o <= tdc_desl3_int;
-- High word value
  tdc_desh4_o <= tdc_desh4_int;
-- Low word value
  tdc_desl4_o <= tdc_desl4_int;
-- High word value
  tdc_desh5_o <= tdc_desh5_int;
-- Low word value
  tdc_desl5_o <= tdc_desl5_int;
-- High word value
  tdc_desh6_o <= tdc_desh6_int;
-- Low word value
  tdc_desl6_o <= tdc_desl6_int;
-- High word value
  tdc_desh7_o <= tdc_desh7_int;
-- Low word value
  tdc_desl7_o <= tdc_desl7_int;
-- High word value
  tdc_desh8_o <= tdc_desh8_int;
-- Low word value
  tdc_desl8_o <= tdc_desl8_int;
-- High word value
  tdc_desh9_o <= tdc_desh9_int;
-- Low word value
  tdc_desl9_o <= tdc_desl9_int;
-- High word value
  tdc_desh10_o <= tdc_desh10_int;
-- Low word value
  tdc_desl10_o <= tdc_desl10_int;
-- High word value
  tdc_desh11_o <= tdc_desh11_int;
-- Low word value
  tdc_desl11_o <= tdc_desl11_int;
-- High word value
  tdc_desh12_o <= tdc_desh12_int;
-- Low word value
  tdc_desl12_o <= tdc_desl12_int;
-- High word value
  tdc_desh13_o <= tdc_desh13_int;
-- Low word value
  tdc_desl13_o <= tdc_desl13_int;
-- High word value
  tdc_desh14_o <= tdc_desh14_int;
-- Low word value
  tdc_desl14_o <= tdc_desl14_int;
-- High word value
  tdc_desh15_o <= tdc_desh15_int;
-- Low word value
  tdc_desl15_o <= tdc_desl15_int;
-- High word value
  tdc_desh16_o <= tdc_desh16_int;
-- Low word value
  tdc_desl16_o <= tdc_desl16_int;
-- High word value
  tdc_desh17_o <= tdc_desh17_int;
-- Low word value
  tdc_desl17_o <= tdc_desl17_int;
-- High word value
  tdc_desh18_o <= tdc_desh18_int;
-- Low word value
  tdc_desl18_o <= tdc_desl18_int;
-- High word value
  tdc_desh19_o <= tdc_desh19_int;
-- Low word value
  tdc_desl19_o <= tdc_desl19_int;
-- High word value
  tdc_desh20_o <= tdc_desh20_int;
-- Low word value
  tdc_desl20_o <= tdc_desl20_int;
-- High word value
  tdc_desh21_o <= tdc_desh21_int;
-- Low word value
  tdc_desl21_o <= tdc_desl21_int;
-- High word value
  tdc_desh22_o <= tdc_desh22_int;
-- Low word value
  tdc_desl22_o <= tdc_desl22_int;
-- High word value
  tdc_desh23_o <= tdc_desh23_int;
-- Low word value
  tdc_desl23_o <= tdc_desl23_int;
-- High word value
  tdc_desh24_o <= tdc_desh24_int;
-- Low word value
  tdc_desl24_o <= tdc_desl24_int;
-- High word value
  tdc_desh25_o <= tdc_desh25_int;
-- Low word value
  tdc_desl25_o <= tdc_desl25_int;
-- High word value
  tdc_desh26_o <= tdc_desh26_int;
-- Low word value
  tdc_desl26_o <= tdc_desl26_int;
-- High word value
  tdc_desh27_o <= tdc_desh27_int;
-- Low word value
  tdc_desl27_o <= tdc_desl27_int;
-- High word value
  tdc_desh28_o <= tdc_desh28_int;
-- Low word value
  tdc_desl28_o <= tdc_desl28_int;
-- High word value
  tdc_desh29_o <= tdc_desh29_int;
-- Low word value
  tdc_desl29_o <= tdc_desl29_int;
-- Value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Value
-- High word value
-- Low word value
-- Freeze request
  tdc_dctl_req_o <= tdc_dctl_req_int;
-- Freeze acknowledgement
-- Switch to next channel
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tdc_csel_next_dly0 <= '0';
      tdc_csel_next_o <= '0';
    elsif rising_edge(bus_clock_int) then
      tdc_csel_next_dly0 <= tdc_csel_next_int;
      tdc_csel_next_o <= tdc_csel_next_int and (not tdc_csel_next_dly0);
    end if;
  end process;
  
  
-- Last channel reached
-- Calibration signal select
  tdc_cal_o <= tdc_cal_int;
-- Address
  tdc_luta_o <= tdc_luta_int;
-- Data
-- Address
  tdc_hisa_o <= tdc_hisa_int;
-- Data
-- Measurement start
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      tdc_fcc_st_dly0 <= '0';
      tdc_fcc_st_o <= '0';
    elsif rising_edge(bus_clock_int) then
      tdc_fcc_st_dly0 <= tdc_fcc_st_int;
      tdc_fcc_st_o <= tdc_fcc_st_int and (not tdc_fcc_st_dly0);
    end if;
  end process;
  
  
-- Measurement ready
-- Result
-- Result
-- extra code for reg/fifo/mem: Interrupt disable register
  eic_idr_int(31 downto 0) <= wrdata_reg(31 downto 0);
-- extra code for reg/fifo/mem: Interrupt enable register
  eic_ier_int(31 downto 0) <= wrdata_reg(31 downto 0);
-- extra code for reg/fifo/mem: Interrupt status register
  eic_isr_clear_int(31 downto 0) <= wrdata_reg(31 downto 0);
-- extra code for reg/fifo/mem: IRQ_CONTROLLER
  eic_irq_controller_inst : wbgen2_eic
    generic map (
      g_num_interrupts     => 32,
      g_irq00_mode         => 0,
      g_irq01_mode         => 0,
      g_irq02_mode         => 0,
      g_irq03_mode         => 0,
      g_irq04_mode         => 0,
      g_irq05_mode         => 0,
      g_irq06_mode         => 0,
      g_irq07_mode         => 0,
      g_irq08_mode         => 0,
      g_irq09_mode         => 0,
      g_irq0a_mode         => 0,
      g_irq0b_mode         => 0,
      g_irq0c_mode         => 0,
      g_irq0d_mode         => 0,
      g_irq0e_mode         => 0,
      g_irq0f_mode         => 0,
      g_irq10_mode         => 0,
      g_irq11_mode         => 0,
      g_irq12_mode         => 0,
      g_irq13_mode         => 0,
      g_irq14_mode         => 0,
      g_irq15_mode         => 0,
      g_irq16_mode         => 0,
      g_irq17_mode         => 0,
      g_irq18_mode         => 0,
      g_irq19_mode         => 0,
      g_irq1a_mode         => 0,
      g_irq1b_mode         => 0,
      g_irq1c_mode         => 0,
      g_irq1d_mode         => 0,
      g_irq1e_mode         => 0,
      g_irq1f_mode         => 0
    )
    port map (
      clk_i                => bus_clock_int,
      rst_n_i              => rst_n_i,
      irq_i                => irq_inputs_vector_int,
      irq_ack_o            => eic_irq_ack_int,
      reg_imr_o            => eic_imr_int,
      reg_ier_i            => eic_ier_int,
      reg_ier_wr_stb_i     => eic_ier_write_int,
      reg_idr_i            => eic_idr_int,
      reg_idr_wr_stb_i     => eic_idr_write_int,
      reg_isr_o            => eic_isr_status_int,
      reg_isr_i            => eic_isr_clear_int,
      reg_isr_wr_stb_i     => eic_isr_write_int,
      wb_irq_o             => wb_irq_o
    );
  
  irq_inputs_vector_int(0) <= irq_ie0_i;
  irq_inputs_vector_int(1) <= irq_ie1_i;
  irq_inputs_vector_int(2) <= irq_ie2_i;
  irq_inputs_vector_int(3) <= irq_ie3_i;
  irq_inputs_vector_int(4) <= irq_ie4_i;
  irq_inputs_vector_int(5) <= irq_ie5_i;
  irq_inputs_vector_int(6) <= irq_ie6_i;
  irq_inputs_vector_int(7) <= irq_ie7_i;
  irq_inputs_vector_int(8) <= irq_ie8_i;
  irq_inputs_vector_int(9) <= irq_ie9_i;
  irq_inputs_vector_int(10) <= irq_ie10_i;
  irq_inputs_vector_int(11) <= irq_ie11_i;
  irq_inputs_vector_int(12) <= irq_ie12_i;
  irq_inputs_vector_int(13) <= irq_ie13_i;
  irq_inputs_vector_int(14) <= irq_ie14_i;
  irq_inputs_vector_int(15) <= irq_ie15_i;
  irq_inputs_vector_int(16) <= irq_ie16_i;
  irq_inputs_vector_int(17) <= irq_ie17_i;
  irq_inputs_vector_int(18) <= irq_ie18_i;
  irq_inputs_vector_int(19) <= irq_ie19_i;
  irq_inputs_vector_int(20) <= irq_ie20_i;
  irq_inputs_vector_int(21) <= irq_ie21_i;
  irq_inputs_vector_int(22) <= irq_ie22_i;
  irq_inputs_vector_int(23) <= irq_ie23_i;
  irq_inputs_vector_int(24) <= irq_ie24_i;
  irq_inputs_vector_int(25) <= irq_ie25_i;
  irq_inputs_vector_int(26) <= irq_ie26_i;
  irq_inputs_vector_int(27) <= irq_ie27_i;
  irq_inputs_vector_int(28) <= irq_ie28_i;
  irq_inputs_vector_int(29) <= irq_ie29_i;
  irq_inputs_vector_int(30) <= irq_isc_i;
  irq_inputs_vector_int(31) <= irq_icc_i;
  rwaddr_reg <= wb_addr_i;
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
